- Functions
A JavaScript function is defined with the function keyword, followed by a name, followed by parentheses ().

Function names can contain letters, digits, underscores, and dollar signs (same rules as variables).

The parentheses may include parameter names separated by commas:
(parameter1, parameter2, ...)

The code to be executed, by the function, is placed inside curly brackets: {}

function name(parameter1, parameter2, parameter3) {
    code to be executed
}

- When functions are invoked:
The code inside the function will execute when "something" invokes (calls) the function:

When an event occurs (when a user clicks a button)
When it is invoked (called) from JavaScript code
Automatically (self invoked)

- Objects : are the entity tha have properties and methods

The values are written as name:value pairs (name and value separated by a colon).
height:5'5
key   : value

var chair = {
				type:"wood", 
				model:"500K", 
				color:"white"
			};	


var car ={
	color:"red",
	brand:"Maruti",
	modelNo:"Nexa2001"
};

var person = {
				firstName:"John", 
				lastName:"Doe", 
				age:50,
				 eyeColor:"blue"
			};

var age = person.age;

var age = person["age"];

- Different ways of creating object:
Using the Object() constructor:

var d = new Object();
This is the simplest way to create an empty object. I believe it is now discouraged.

Using Object.create() method:

var a = Object.create(null);
This method creates a new object extending the prototype object passed as a parameter.

Using the bracket's syntactig sugar:

var b = {};
This is equivalent to Object.create(null) method, using a null prototype as an argument.

Using a function constructor

var Obj = function(name) {
  this.name = name
}
var c = new Obj("hello"); 


- Different ways of accessing object Properties:
1)objectname.property
2)objectname["propertyName"]

- Accessing object method :
	objectName.methodName();
	name = person.fullName;

- Strings and string Methods in Javascript :
1)string Length == string.length